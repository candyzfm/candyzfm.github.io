{"meta":{"title":"bookwarm","subtitle":"","description":"bookwarm","author":"Zafer Ma","url":"http://bookwarm.cn","root":"/"},"pages":[{"title":"关于俺","date":"2016-05-24T05:45:13.000Z","updated":"2020-08-02T08:32:24.037Z","comments":false,"path":"about/index.html","permalink":"http://bookwarm.cn/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-08-02T12:50:27.000Z","updated":"2020-08-02T12:58:57.846Z","comments":true,"path":"categories/index.html","permalink":"http://bookwarm.cn/categories/index.html","excerpt":"","text":""},{"title":"search","date":"2020-08-02T08:43:22.000Z","updated":"2020-08-02T12:27:23.997Z","comments":true,"path":"search/index.html","permalink":"http://bookwarm.cn/search/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-08-02T08:43:22.000Z","updated":"2020-08-02T08:43:44.293Z","comments":true,"path":"tags/index.html","permalink":"http://bookwarm.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"网络协议之OSI七层协议简介","slug":"net_01","date":"2020-08-06T06:33:45.000Z","updated":"2020-08-08T11:22:57.750Z","comments":true,"path":"2020/08/06/net_01/","link":"","permalink":"http://bookwarm.cn/2020/08/06/net_01/","excerpt":"&emsp;&emsp;市面上有四层，五层协议，七层协议等。其中七层协议模型的缩写是OSI，即Open System Interconnection（开放式系统互联模型）。OSI模型有7层结构，每层都可以有几个子层。 OSI的7层从上到下分别是 7 应用层 6 表示层 5 会话层 4 传输层 3 网络层 2 数据链路层 1 物理层；其中高层（即7、6、5、4层）定义了应用程序的功能，下面3层（即3、2、1层）主要面向通过网络的端到端，点到点的数据流。","text":"&emsp;&emsp;市面上有四层，五层协议，七层协议等。其中七层协议模型的缩写是OSI，即Open System Interconnection（开放式系统互联模型）。OSI模型有7层结构，每层都可以有几个子层。 OSI的7层从上到下分别是 7 应用层 6 表示层 5 会话层 4 传输层 3 网络层 2 数据链路层 1 物理层；其中高层（即7、6、5、4层）定义了应用程序的功能，下面3层（即3、2、1层）主要面向通过网络的端到端，点到点的数据流。 OSI七层协议 第一层 物理层 &emsp;&emsp;物理层的媒体包括架空明线、平衡电缆、光纤、无线信道等。主要作用是将数据以bit流形式从机器A传输到机器B，即二进制的0101数据，将它们转换为电流强弱来进行传输，到达目的机器B后，再将0101转换为机器码，这个过程就是数模转换和模数转换。物理层制定了相关传输介质的规范：比如连接头、帧、帧的使用、电流、编码及光调制等都属于各种物理层规范中的内容。 第二层 数据链路层 &emsp;&emsp;定义了如何让格式化数据进行传输，以及如何让控制对物理介质的访问。这一层通常还提供错误检测和纠正，以确保数据的可靠传输。 第三层 网络层 &emsp;&emsp;这层对端到端的包传输进行定义，它定义了能够标识所有结点的逻辑地址，还定义了路由实现的方式和学习的方式。为了适应最大传输单元长度小于包长度的传输介质，网络层还定义了如何将一个包分解成更小的包的分段方法。路由器就属于网络层。网络层需要关注的协议是IP协议。 第四层 传输层 &emsp;&emsp;传输层是解决了打包的问题。但是如果我有多台计算机，怎么能找到我要发的那台？或者A要给F发信息，中间要经过B/C/D/E，但是中间还有好多节点，如K/J/Z/Y.我怎么选择最佳路径？这就是路由要做的事情。 &emsp;&emsp;于是，发明了网络层，也就是路由器，交换那些具有寻址功能的设备所实现的功能。这一层定义的是IP复制，通过IP地址寻址，所以产生了协议。传输层需要关注的协议有TCP协议和UDP协议。 第五层 会话层 &emsp;&emsp;用于不同机器上用户之间建立健全及管理会话。&emsp;&emsp;它提供包括访问验证和会话管理在内的建立和维护应用之间通信的机制。如服务器验证用户登录便是由会话层完成的。 第六层 表示层 &emsp;&emsp;这一层主要解决用户信息的语法表示问题。它将欲交换的数据从适合于某一用户的抽象语法，转换为适合于OSI系统内部使用的传送语法。即提供格式化的表示和转换数据服务。&emsp;&emsp;比如：用Linux给window发包，两个系统语法不一致，就像安装包一样，EXE不能在Linux下用，shell在window也也是不能直接运行的。另外，数据的压缩和解压缩，加密和解密等工作都由表示层负责。 第七层 应用层 &emsp;&emsp;应用层由来：用户使用的都是应用程序，均工作于应用层，互联网是开发的，大家都可以开发自己的应用程序，数据多种多样，必须规定好数据的组织形式。 应用层功能：规定应用程序的数据格式。 &emsp;&emsp;例：TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了“应用层”。 &emsp;&emsp;应用层规定应用程序的发送方和接收方必须使用固定长度的消息头，消息头必须使用某种固定的组成，而且消息头里必须记录消息体的长度等一系列信息，以便接收方能够正确解析发送方发送的数据。该层需要注意的是HTTP协议。","categories":[{"name":"网络协议","slug":"网络协议","permalink":"http://bookwarm.cn/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"tags":[{"name":"网络协议","slug":"网络协议","permalink":"http://bookwarm.cn/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"author":"zafer"},{"title":"同一个电脑设置多个git账户的配置","slug":"tools_git01","date":"2020-08-04T13:49:25.000Z","updated":"2020-08-04T14:09:05.013Z","comments":true,"path":"2020/08/04/tools_git01/","link":"","permalink":"http://bookwarm.cn/2020/08/04/tools_git01/","excerpt":"有时候，代码需要保存到不同的git仓库中，例如gitee，GitHub，或者是gitLab上，为了方便提交代码，可以设置多对公钥和秘钥，通过配置文件，进行统一管理，而不必使用全局配置的git设置。","text":"有时候，代码需要保存到不同的git仓库中，例如gitee，GitHub，或者是gitLab上，为了方便提交代码，可以设置多对公钥和秘钥，通过配置文件，进行统一管理，而不必使用全局配置的git设置。 设置步骤如下： 第一步 取消全局git账户配置 查看配置列表是否有use.name或use.emailgit config –list 删除全局配置的用户名及密码 12git config --global --unset user.namegit config --global --unset user.email 第二步，添加秘钥 -f 表示保存时候的名称，我这里为了区别开头分别设置为gitee和github；指令如下 123ssh-keygen -t rsa -C &quot;yourname@gitee.com&quot; -f gitee_rsassh-keygen -t rsa -C &quot;yourname@github.com&quot; -f github_rsa 这里已经生成了两组公钥和秘钥了，如图 第三步 配置秘钥 新建config文件 123456789101112131415# gitee# 域名地址的别名Host gitee # 真实的域名地址HostName gitee.com#配置使用用户名User user1 #这里是id_rsa的地址IdentityFile ~&#x2F;.ssh&#x2F;gitee_rsa # githubHost githubHostName github.comUser user2IdentityFile ~&#x2F;.ssh&#x2F;github_rsa 第四步 在git上登录账号并添加公钥 分别登陆gitee和GitHub网站，分别添加各自的SSH KEY 第五步 测试 1ssh -T git@github","categories":[{"name":"项目工具","slug":"项目工具","permalink":"http://bookwarm.cn/categories/%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/"},{"name":"Git","slug":"项目工具/Git","permalink":"http://bookwarm.cn/categories/%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://bookwarm.cn/tags/Git/"}],"author":"zafer"}],"categories":[{"name":"网络协议","slug":"网络协议","permalink":"http://bookwarm.cn/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"name":"项目工具","slug":"项目工具","permalink":"http://bookwarm.cn/categories/%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/"},{"name":"Git","slug":"项目工具/Git","permalink":"http://bookwarm.cn/categories/%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Git/"}],"tags":[{"name":"网络协议","slug":"网络协议","permalink":"http://bookwarm.cn/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"name":"Git","slug":"Git","permalink":"http://bookwarm.cn/tags/Git/"}]}