<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>同一个电脑设置多个git账户的配置</title>
    <url>/2020/08/04/tools_git01/</url>
    <content><![CDATA[<p>有时候，代码需要保存到不同的git仓库中，例如gitee，GitHub，或者是gitLab上，为了方便提交代码，可以设置多对公钥和秘钥，通过配置文件，进行统一管理，而不必使用全局配置的git设置。</p>
<a id="more"></a>

<p>设置步骤如下：</p>

        <h3 id="第一步-取消全局git账户配置"   >
          <a href="#第一步-取消全局git账户配置" class="heading-link"><i class="fas fa-link"></i></a>第一步 取消全局git账户配置</h3>
      <p>查看配置列表是否有use.name或use.email<br>git config –list</p>
<p><img src="http://img.booksworm.com.cn/blog/tools/git_blog1_01.jpg" alt="avatar"></p>
<p>删除全局配置的用户名及密码</p>
<p><img src="http://img.booksworm.com.cn/blog/tools/git_blog1_02.jpg" alt="avatar"></p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">git config --global --unset user.name</span><br><span class="line">git config --global --unset user.email</span><br></pre></td></tr></table></div></figure>


        <h3 id="第二步，添加秘钥"   >
          <a href="#第二步，添加秘钥" class="heading-link"><i class="fas fa-link"></i></a>第二步，添加秘钥</h3>
      <p>-f 表示保存时候的名称，我这里为了区别开头分别设置为gitee和github；指令如下</p>
<p><img src="http://img.booksworm.com.cn/blog/tools/git_blog1_03.jpg" alt="avatar"></p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;yourname@gitee.com&quot; -f gitee_rsa</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -C &quot;yourname@github.com&quot; -f github_rsa</span><br></pre></td></tr></table></div></figure>

<p>这里已经生成了两组公钥和秘钥了，如图</p>
<p><img src="http://img.booksworm.com.cn/blog/tools/git_blog1_04.jpg" alt="avatar"></p>

        <h3 id="第三步-配置秘钥"   >
          <a href="#第三步-配置秘钥" class="heading-link"><i class="fas fa-link"></i></a>第三步 配置秘钥</h3>
      <p>新建config文件</p>
<p><img src="http://img.booksworm.com.cn/blog/tools/git_blog1_04_1.jpg" alt="avatar"></p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># gitee</span><br><span class="line"># 域名地址的别名</span><br><span class="line">Host gitee </span><br><span class="line"># 真实的域名地址</span><br><span class="line">HostName gitee.com</span><br><span class="line">#配置使用用户名</span><br><span class="line">User user1                     </span><br><span class="line">#这里是id_rsa的地址</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;gitee_rsa   </span><br><span class="line"></span><br><span class="line"># github</span><br><span class="line">Host github</span><br><span class="line">HostName github.com</span><br><span class="line">User user2</span><br><span class="line">IdentityFile  ~&#x2F;.ssh&#x2F;github_rsa</span><br></pre></td></tr></table></div></figure>


        <h3 id="第四步-在git上登录账号并添加公钥"   >
          <a href="#第四步-在git上登录账号并添加公钥" class="heading-link"><i class="fas fa-link"></i></a>第四步 在git上登录账号并添加公钥</h3>
      <p>分别登陆gitee和GitHub网站，分别添加各自的SSH KEY</p>
<p><img src="http://img.booksworm.com.cn/blog/tools/git_blog1_05.jpg" alt="avatar"></p>

        <h3 id="第五步-测试"   >
          <a href="#第五步-测试" class="heading-link"><i class="fas fa-link"></i></a>第五步 测试</h3>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">ssh -T git@github</span><br></pre></td></tr></table></div></figure>
<p><img src="http://img.booksworm.com.cn/blog/tools/git_blog1_06.jpg" alt="avatar"></p>
]]></content>
      <categories>
        <category>项目工具</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>网络协议之OSI七层协议简介</title>
    <url>/2020/08/06/net_01/</url>
    <content><![CDATA[<p>&emsp;&emsp;市面上有四层，五层协议，七层协议等。其中七层协议模型的缩写是OSI，即Open System Interconnection（开放式系统互联模型）。OSI模型有7层结构，每层都可以有几个子层。 OSI的7层从上到下分别是 7 应用层 6 表示层 5 会话层 4 传输层 3 网络层 2 数据链路层 1 物理层；其中高层（即7、6、5、4层）定义了应用程序的功能，下面3层（即3、2、1层）主要面向通过网络的端到端，点到点的数据流。</p>
<a id="more"></a>

<p>OSI七层协议</p>
<p><img src="http://img.booksworm.com.cn/blog/network/net01_01.png" alt="net01_01.png"></p>

        <h3 id="第一层-物理层"   >
          <a href="#第一层-物理层" class="heading-link"><i class="fas fa-link"></i></a>第一层 物理层</h3>
      <p>&emsp;&emsp;物理层的媒体包括架空明线、平衡电缆、光纤、无线信道等。主要作用是将数据以bit流形式从机器A传输到机器B，即二进制的0101数据，将它们转换为电流强弱来进行传输，到达目的机器B后，再将0101转换为机器码，这个过程就是数模转换和模数转换。物理层制定了相关传输介质的规范：比如连接头、帧、帧的使用、电流、编码及光调制等都属于各种物理层规范中的内容。</p>

        <h3 id="第二层-数据链路层"   >
          <a href="#第二层-数据链路层" class="heading-link"><i class="fas fa-link"></i></a>第二层 数据链路层</h3>
      <p>&emsp;&emsp;定义了如何让格式化数据进行传输，以及如何让控制对物理介质的访问。这一层通常还提供错误检测和纠正，以确保数据的可靠传输。</p>

        <h3 id="第三层-网络层"   >
          <a href="#第三层-网络层" class="heading-link"><i class="fas fa-link"></i></a>第三层 网络层</h3>
      <p>&emsp;&emsp;这层对端到端的包传输进行定义，它定义了能够标识所有结点的逻辑地址，还定义了路由实现的方式和学习的方式。为了适应最大传输单元长度小于包长度的传输介质，网络层还定义了如何将一个包分解成更小的包的分段方法。路由器就属于网络层。网络层需要关注的协议是IP协议。</p>
<p><img src="http://img.booksworm.com.cn/blog/network/net01_02.jpg" alt="net01_01.png"></p>

        <h3 id="第四层-传输层"   >
          <a href="#第四层-传输层" class="heading-link"><i class="fas fa-link"></i></a>第四层 传输层</h3>
      <p>&emsp;&emsp;传输层是解决了打包的问题。但是如果我有多台计算机，怎么能找到我要发的那台？或者A要给F发信息，中间要经过B/C/D/E，但是中间还有好多节点，如K/J/Z/Y.我怎么选择最佳路径？这就是路由要做的事情。</p>
<p>&emsp;&emsp;于是，发明了网络层，也就是路由器，交换那些具有寻址功能的设备所实现的功能。这一层定义的是IP复制，通过IP地址寻址，所以产生了协议。传输层需要关注的协议有TCP协议和UDP协议。</p>

        <h3 id="第五层-会话层"   >
          <a href="#第五层-会话层" class="heading-link"><i class="fas fa-link"></i></a>第五层 会话层</h3>
      <p>&emsp;&emsp;用于不同机器上用户之间建立健全及管理会话。<br>&emsp;&emsp;它提供包括访问验证和会话管理在内的建立和维护应用之间通信的机制。如服务器验证用户登录便是由会话层完成的。</p>

        <h3 id="第六层-表示层"   >
          <a href="#第六层-表示层" class="heading-link"><i class="fas fa-link"></i></a>第六层 表示层</h3>
      <p>&emsp;&emsp;这一层主要解决用户信息的语法表示问题。它将欲交换的数据从适合于某一用户的抽象语法，转换为适合于OSI系统内部使用的传送语法。即提供格式化的表示和转换数据服务。<br>&emsp;&emsp;比如：用Linux给window发包，两个系统语法不一致，就像安装包一样，EXE不能在Linux下用，shell在window也也是不能直接运行的。另外，数据的压缩和解压缩，加密和解密等工作都由表示层负责。</p>

        <h3 id="第七层-应用层"   >
          <a href="#第七层-应用层" class="heading-link"><i class="fas fa-link"></i></a>第七层 应用层</h3>
      <p>&emsp;&emsp;应用层由来：用户使用的都是应用程序，均工作于应用层，互联网是开发的，大家都可以开发自己的应用程序，数据多种多样，必须规定好数据的组织形式。 </p>
<p>应用层功能：规定应用程序的数据格式。</p>
<p>&emsp;&emsp;例：TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了“应用层”。</p>
<p>&emsp;&emsp;应用层规定应用程序的发送方和接收方必须使用固定长度的消息头，消息头必须使用某种固定的组成，而且消息头里必须记录消息体的长度等一系列信息，以便接收方能够正确解析发送方发送的数据。该层需要注意的是HTTP协议。</p>
]]></content>
      <categories>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
</search>
